import sys, h5py, numpy, sqlite3, os, datetime, time, math, calendar, pdb
import StringIO
from random import random
from django.shortcuts import render
from django.http import HttpResponse
from django.utils import simplejson
from django.contrib.auth.decorators import login_required
from django.template import RequestContext, Template
from scipy.interpolate import interp1d, UnivariateSpline

VASA_DATADIR='/var/data'
GRID_DATADIR=VASA_DATADIR + '/grid_data'

def cvt_time(s):
       t = calendar.timegm(time.strptime(s, '%Y-%m-%d %H:%M:%SZ'))
       return t / (60.0 * 60.0)

Radii_12Hr = [0.0, 33.0, 52.0, 72.0, 92.0, 128.0, 177.0, 229.0]

@login_required
def track_viewer(request):
     return render(request, 'track_viewer.html', {})

@login_required
def get_years(request):
	try:
	    years = os.listdir(GRID_DATADIR)
	    return HttpResponse(simplejson.dumps({'status': 'OK', 'result': years}), mimetype = u'application/json')
	except:
	    return HttpResponse(simplejson.dumps({'status': 'unable to access year list from %s' % GRID_DATADIR}), mimetype = u'application/json')

@login_required
def get_storms(request, year):
	try:
	    storms = os.listdir(GRID_DATADIR + '/' + year)
	    return HttpResponse(simplejson.dumps({'status': 'OK', 'result': storms}), mimetype = u'application/json')
	except:
	    return HttpResponse(simplejson.dumps({'status': 'unable to access storm list for year ' + year}), mimetype = u'application/json')
	    
@login_required
def get_storm_info(request, year, storm):
    
	result = []
	
	for dataset in sorted(os.listdir(GRID_DATADIR + '/' + year + '/' + storm + '/consensus')):
	    f = GRID_DATADIR + '/' + year + '/' + storm + '/consensus/' + dataset + '/fort.63.nc'
	    try:
	      h = h5py.File(f, 'r')
	      t0 = datetime.datetime.strptime(h['time'].attrs['units'][len('seconds since '):], '%Y-%m-%d %H:%M:%S +00:00')

	      times = []
	      for t in h['time']:
		times.append(str(t0 + datetime.timedelta(seconds=t)))

	      vars = ['depth(1)', 'zeta(%d)' %  h['zeta'].shape[0]]
	      h.close()

	      try:
		  f = GRID_DATADIR + '/' + y + '/' + storm + '/consensus/' + dataset + '/fort.64.nc'
		  h = h5py.File(f, 'r')
		  vars.append('current(%d)' % h['u-vel'].shape[0])
		  h.close()
	      except:
		  pass

	      try:
		  f = GRID_DATADIR + '/' + y + '/' + storm + '/consensus/' + dataset + '/fort.73.nc'
		  h = h5py.File(f, 'r')
		  vars.append('pressure(%d)' % h['pressure'].shape[0])
		  h.close()
	      except:
		  pass

	      try:
		  f = GRID_DATADIR + '/' + y + '/' + storm + '/consensus/' + dataset + '/fort.74.nc'
		  h = h5py.File(f, 'r')
		  vars.append('wind(%d)' % h['windx'].shape[0])
		  h.close()
	      except:
		  pass

	      result.append([dataset, vars, times])

	    except:
	      pass

	return HttpResponse(simplejson.dumps({'status': 'OK', 'result': result}), mimetype = u'application/json')

@login_required
def get_track(request, year, storm, dataset):
    try:
	filename = GRID_DATADIR + "/" + year + "/" + storm + "/consensus/" + dataset + "/track.csv"
	file = open(filename, "r")
	track = []
	for f in file:
		f = f.strip().split(',')
		if len(f) == 3:
		    f = [float(i) for i in f]
		    track.append((f[0], [f[1], f[2]]))
	file.close()
	return HttpResponse(simplejson.dumps({'status': 'OK', 'result': track}), mimetype = u'application/json')
    except:
	return HttpResponse(simplejson.dumps({'status': 'unable to access track for dataset ' + dataset + ' in storm ' + storm + '/' + year}), mimetype = u'application/json')

@login_required
def get_shape(request, year, storm, dataset):
    try:
	filename = GRID_DATADIR + "/" + year + "/" + storm + "/consensus/" + dataset + "/track.csv"
	file = open(filename, "r")
	time = []
	x = []
	y = []
	for f in file:
		f = f.strip().split(',')
		if len(f) == 3:
		    f = [float(i) for i in f]
		    time.append(float(f[0]) / 3600)
		    x.append(float(f[1]))
		    y.append(float(f[2]))
	file.close()
    except:
	return HttpResponse(simplejson.dumps({'status': 'unable to access track for dataset ' + dataset + ' in storm ' + storm + '/' + year}), mimetype = u'application/json')

    time = [0] + [i-time[0] for i in time[1:]]

    max_time = 12*(len(Radii_12Hr) - 1)

    if time[-1] < max_time:
	 max_time = time[-1]

    t_interp = [max_time * (i/64.0) for i in range(64)]

    x_smoother = UnivariateSpline(time, x, w=([999] + [1 for t in time[1:]]), s=len(time))
    y_smoother = UnivariateSpline(time, y, w=([999] + [1 for t in time[1:]]), s=len(time))
    x = x_smoother(t_interp)
    y = y_smoother(t_interp)

    tt = [x[0]] + x + [x[-1]]
    dx = [j-i for i,j in zip(tt[:-2], tt[2:])]

    tt = [y[0]] + y + [y[-1]]
    dy = [j-i for i,j in zip(tt[:-2], tt[2:])]

    tt = [x[0]] + x + [x[-1]]

    rx = [i + j for i,j in zip(x,dy)]
    ry = [i - j for i,j in zip(y,dx)]

    # Use those to figure out scaling  - the following gives the distance between
    # each point and a point along its perpendicular in NM
    cosPhi = [math.cos((math.radians(i) + math.radians(j)) / 2.0) for i,j in zip(y,ry)]
    a = [(math.radians(i) - math.radians(j))*k for i,j,k in zip(x,rx,cosPhi)]
    b = [(math.radians(i) - math.radians(j)) for i,j in zip(y,ry)]
    d  = [3440.07 * math.sqrt(i*i + j*j) for i,j in zip(a,b)]

    # The following gives the desired distance in NM
    rfunc = interp1d([12.0 * i for i in range(len(Radii_12Hr))], Radii_12Hr)
    r = [rfunc(t) for t in t_interp]

    # scaling is the ratio of the desired radius to the radius given by the 
    # calculation of the perpendicular vector above
    s = [0 if j == 0 else i/j for i,j in zip(r, d)]

    r = [(t, [_x+(_dy*_s), _y-(_dx*_s)]) for t,_x,_dx,_y,_dy,_s in zip(time, x, dx, y, dy, s)]
    l = [(t, [_x-(_dy*_s), _y+(_dx*_s)]) for t,_x,_dx,_y,_dy,_s in zip(time, x, dx, y, dy, s)]
    
    r.reverse()
    shape = l + r

    j = simplejson.dumps({'status': 'OK', 'result': shape})
    return HttpResponse(j, mimetype = u'application/json')

@login_required
def get_data(request, name, year, dataset, timestep, longitude_range, latitude_range, variables):

    variables = variables.split(',')

    longitude_range = [int(i) for i in longitude_range.split(',')]
    latitude_range = [int(i) for i in latitude_range.split(',')]

    datadir = GRID_DATADIR + "/" + year + "/" + name + "/consensus/" + dataset  

    try:
	fname = datadir + "/fort.63.nc"
	ds = open(fname, 'r') 
	ds.close()
    except:
	return HttpResponse(simplejson.dumps({'status': 'Unable to TEST open mesh file: ' + fname}), mimetype = u'application/json')

    try:
	fname = datadir + "/fort.63.nc"
	ds = h5py.File(fname, 'r')
    except:
	return HttpResponse(simplejson.dumps({'status': 'Unable to open mesh file: ' + fname}), mimetype = u'application/json')

    try:
	x = numpy.array(ds['x'])
	y = numpy.array(ds['y'])
	triangles = numpy.array(ds['element']) - 1

	num_points = x.shape[0]
	num_triangles = triangles.shape[0]
	latlon_range_flags = numpy.array((x > longitude_range[0]) & (x < longitude_range[1]) & (y > latitude_range[0]) & (y < latitude_range[1]))
	kept_triangle_flags = latlon_range_flags[triangles[:,0]] | latlon_range_flags[triangles[:,1]] | latlon_range_flags[triangles[:,2]]
	deleted_triangle_indices = (numpy.array(range(1, num_triangles+1)) * (1-kept_triangle_flags)) - 1
	triangles = numpy.delete(triangles, deleted_triangle_indices, 0)
	reffed_points = numpy.unique(triangles)
	points = numpy.dstack((x[reffed_points], y[reffed_points]))[0]
	pointmap = numpy.repeat(0, num_points)
	pointmap[reffed_points] = 1
	pointmap = numpy.cumsum(pointmap) - 1
	triangles = pointmap[triangles]
	ds.close()
	print 'grid loaded'
    except:
	return HttpResponse(simplejson.dumps({'status': 'Unable to access mesh file: ' + fname}), mimetype = u'application/json')

    output = {'status': 'OK', 'vertices': points.tolist(), 'triangles': triangles.tolist()}

    if 'depth' in variables:
	try:
	    ds = h5py.File(datadir + "/fort.63.nc", 'r')
	    output['depth'] = ds['depth'][reffed_points].tolist();
	    ds.close()
	except:
	    pass

    if 'zeta' in variables:
	try:
	    ds = h5py.File(datadir + "/fort.63.nc", 'r')
	    output['zeta'] = ds['zeta'][int(timestep)][reffed_points].tolist()
	    ds.close()
	except:
	    pass
	
    if 'pressure' in variables:
	try:
	    ds = h5py.File(datadir + "/fort.73.nc", 'r')
	    output['pressure'] = ds['pressure'][int(timestep)][reffed_points].tolist()
	    ds.close()
	except:
	    pass

    if 'wind' in variables:
	try:
	    ds = h5py.File(datadir + "/fort.74.nc", 'r')
	    output['windx'] = ds['windx'][int(timestep)][reffed_points].tolist()
	    print 'windx loaded'
	    output['windy'] = ds['windy'][int(timestep)][reffed_points].tolist()
	    print 'windy loaded'
	    ds.close()
	except:
	    pass

    if 'current' in variables:
	try:
	    ds = h5py.File(datadir + "/fort.64.nc", 'r')
	    output['currx'] = ds['u-vel'][int(timestep)][reffed_points].tolist()
	    output['curry'] = ds['v-vel'][int(timestep)][reffed_points].tolist()
	    ds.close()
	except:
	    pass
	
    print 'starting jsonification;'
    j = simplejson.dumps({'status': 'OK', 'result': output})
    print 'done jsonification;'
    r  = HttpResponse(j, mimetype = u'application/json')
    print 'HttpResponse return'
    return r

def html(request):
     pdb.set_trace()
     return render(request, 'binary.html', {})

def binary(request):
    r  = HttpResponse()
    foo = numpy.array([random() for i in range(10)])
    S = StringIO.StringIO()
    S.write('The rain in Spain ')
    S.write('falls mainly on the plain')
    r.write(S.getvalue())
    return r
